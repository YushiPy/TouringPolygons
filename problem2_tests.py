
from typing import Iterable, Sequence



type _Vector2 = Iterable[float]
type _Polygon2 = Iterable[_Vector2]

type Test = tuple[_Vector2, _Vector2, Sequence[_Polygon2], Sequence[_Polygon2]]


def parse_test(values: list[list[tuple[float, float]]]) -> Test:
	"""
	Parse a list of values into a Test tuple.
	"""

	ones = [i for i in values if len(i) == 1]
	values = [i for i in values if len(i) > 1]

	start = ones[0][0]
	end = ones[1][0]
	
	polygons = values[1::2]
	fences = values[::2]

	return start, end, polygons, fences

test1 = (
	(-3.0, 3.0), 
	(2.0, -4.0), 
	[
		[(-3.0, -1.0), (3.0, -1.0), (0.0, -2.0)]
	], 
	[
		[(-4.0, 5.0), (-3.0, -3.0), (5.0, -2.0)], 
		[(0.0, 4.0), (2.0, 2.0), (-4.0, -1.0), (-4.0, -5.0), (4.0, -4.0), (4.0, -3.0), (-3.5, -3.0), (4.0, -2.0), (2.0, 5.0)]
	]
)

test2 = (
	(-1.007, 10.067), 
	(-5.007, 2.047), 
	[
		[(1.007, -1.007), (0.0, -2.013), (1.007, -4.027), (3.02, -5.033), (5.033, -4.027), (6.04, -2.013), (5.033, -1.007), (3.02, -0.0)], 
		[(5.033, 10.067), (2.013, 7.047), (5.033, 3.02), (8.054, 3.02), (10.067, 4.027), (11.074, 6.04)], 
	], 
	[
		[(-2.013, 12.08), (-7.047, 8.054), (2.013, 8.054), (-6.04, 7.047), (-7.047, 5.033), (2.013, 4.027), (3.02, 2.013), (-6.04, 3.02), (-6.04, 1.007), (2.013, -6.04), (11.074, -4.027), (6.04, -0.0), (-4.027, 1.007), (-3.02, 2.013), (4.027, 1.007), (3.02, 5.033), (-5.033, 6.04), (3.02, 7.047), (3.02, 9.06), (-3.02, 9.06), (1.007, 10.067)], 
		[(-4.027, -3.02), (4.027, 12.08), (19.127, 6.04), (5.033, 1.007), (14.094, -3.02), (5.033, -8.054)], 
		[(2.013, 14.094), (-2.013, 7.047), (3.02, 10.067), (-3.02, 4.027), (5.033, 11.074), (13.087, 10.067), (13.087, 1.007), (-1.007, -4.027), (-8.054, -3.02), (-4.027, 8.054), (-7.047, 5.033), (-3.02, 13.087), (-9.06, 7.047), (-9.06, 1.007), (-14.094, 2.013), (-15.1, 12.08), (-5.033, 16.107)], 
	]
)

test3 = (
	(0.0, 4.009), 
	(-1.599, -6.447), 
	[
		[(-2.499, -0.0), (1.249, -1.249), (4.998, -0.0)], 
		[(-7.497, -4.998), (-6.247, -3.748), (-4.998, -3.748), (-6.247, -4.998)]
	], 
	[
		[(-6.247, 6.247), (-6.247, 1.249), (-1.249, 1.249), (-6.247, -0.0), (-6.247, -3.0), (8.746, -3.0), (8.746, -0.0), (2.499, 1.249), (8.746, 1.249), (8.746, 4.998), (2.499, 3.748), (6.247, 6.247)], 
		[(-8.746, 3.748), (-7.497, 2.499), (-4.998, 7.497), (-4.998, 2.499), (-3.748, 9.996), (0.0, 8.746), (-1.249, 4.998), (2.499, 7.497), (3.748, 9.996), (3.748, 4.998), (6.247, 8.746), (8.746, 7.497), (6.247, 4.998), (9.996, 2.499), (2.499, 2.499), (9.996, 1.249), (6.247, -1.249), (0.0, -2.499), (9.996, -1.249), (9.996, -3.748), (1.249, -3.748), (8.746, -6.247), (-8.746, -7.497), (-9.996, -4.998), (-3.748, -2.499), (-6.247, -6.247), (-1.249, -2.499), (-9.996, 1.249)], 
		[(-9.079, -10.088), (-7.062, -7.062), (-5.044, -11.097), (1.249, -3.748), (-5.044, -9.079), (-4.035, -2.018), (-7.062, -3.026), (-9.079, -7.062)]
	]
)

test4 = (
	(-1.007, 10.067), 
	(1.007, -7.047), 
	[
		[(1.007, -1.007), (0.0, -2.013), (1.007, -4.027), (3.02, -5.033), (5.033, -4.027), (6.04, -2.013), (5.033, -1.007), (3.02, -0.0)], 
		[(5.033, 10.067), (2.013, 7.047), (5.033, 3.02), (8.054, 3.02), (10.067, 4.027), (11.074, 6.04)], 
		[(-13.087, 8.054), (-13.087, 5.033), (-10.067, 5.033), (-10.067, 9.06)]
	], 
	[
		[(-2.013, 12.08), (-7.047, 8.054), (2.013, 8.054), (-6.04, 7.047), (-7.047, 5.033), (2.013, 4.027), (3.02, 2.013), (-6.04, 3.02), (-6.04, 1.007), (2.013, -6.04), (11.074, -4.027), (6.04, -0.0), (-4.027, 1.007), (-3.02, 2.013), (4.027, 1.007), (3.02, 5.033), (-5.033, 6.04), (3.02, 7.047), (3.02, 9.06), (-3.02, 9.06), (1.007, 10.067)], 
		[(-4.027, -3.02), (4.027, 12.08), (19.127, 6.04), (5.033, 1.007), (14.094, -3.02), (5.033, -8.054)], 
		[(2.013, 14.094), (-2.013, 7.047), (3.02, 10.067), (-3.02, 4.027), (5.033, 11.074), (13.087, 10.067), (13.087, 1.007), (-1.007, -4.027), (-8.054, -3.02), (-4.027, 8.054), (-7.047, 5.033), (-3.02, 13.087), (-9.06, 7.047), (-9.06, 1.007), (-14.094, 2.013), (-15.1, 12.08), (-5.033, 16.107)], 
		[(-13.087, 10.067), (-17.114, 5.033), (-2.013, -17.114), (8.054, -13.087), (0.0, -0.0), (0.0, -8.054), (-4.027, -0.0), (-7.047, -6.04), (-8.054, 10.067)]
	]
)

test5 = ((0.0, 4.0), (4.0, -3.5), [[(-3.0, -0.0), (3.0, -0.0), (0.0, -1.0)]], [[(-6.0, 5.0), (-6.0, 1.0), (-1.0, 1.0), (-6.0, -0.0), (-6.0, -3.0), (6.0, -3.0), (6.0, -0.0), (1.0, 1.0), (6.0, 1.0), (6.0, 5.0)], [(-7.0, 2.0), (7.0, 2.0), (7.0, -4.0), (-7.0, -4.0)]])

test6 = (
	(0.0, 4.0), 
	(4.0, -3.5), 
	[
		[(-3.0, -0.0), (3.0, -0.0), (0.0, -1.0)]
	], 
	[
		[(-0.0, 4.0), (-1.0, 1.0), (-3.0, -0.0), (-0.0, -1.0), (3.0, -0.0), (1.0, 1.0)], 
		[(-3.0, 0.0), (4.0, -3.5), (3.0, 0.0)]
	]
)

test7 = ((0.0, 13.333), (-20.0, -14.804), [[(-6.667, -0.0), (3.333, -3.333), (13.333, -0.0)]], [[(-16.667, 16.667), (-16.667, 3.333), (-3.333, 3.333), (-16.667, -0.0), (-16.667, -13.333), (23.333, -13.333), (23.333, -0.0), (6.667, 3.333), (23.333, 3.333), (23.333, 13.333), (7.133, 9.767), (16.667, 16.667)], [(-23.333, 10.0), (-20.0, 6.667), (-13.333, 20.0), (-13.333, 6.667), (-10.0, 26.667), (0.0, 23.333), (-3.333, 13.333), (6.667, 20.0), (10.0, 26.667), (10.0, 13.333), (16.667, 23.333), (23.333, 20.0), (16.667, 13.333), (26.667, 6.667), (6.667, 6.667), (26.667, 3.333), (16.667, -3.333), (0.0, -6.667), (26.667, -3.333), (26.667, -10.0), (3.333, -10.0), (23.333, -16.667), (-23.333, -20.0), (-26.667, -13.333), (-10.0, -6.667), (-16.667, -16.667), (-3.333, -6.667), (-26.667, 3.333)]])

test8 = ((5.0, -0.0), (-3.0, 6.0), [[(-1.0, 2.0), (-2.0, 1.0), (-1.0, 1.0), (1.0, 2.0), (1.0, 3.0)], [(2.0, -8.0), (9.0, -8.0), (9.0, -7.0)], [(-3.0, -2.0), (-4.0, -3.0), (-4.0, -4.0), (-2.0, -6.0), (0.0, -6.0), (2.0, -5.0), (3.0, -4.0), (1.0, -2.0), (-1.0, -2.0)]], [[(-5.0, 8.0), (-5.0, -3.0), (4.0, -5.0), (6.0, 2.0), (2.0, -1.0), (-2.0, -1.0), (2.0, 1.0), (3.0, 5.0), (-2.0, 2.0), (-2.0, 4.0), (-4.0, 3.0)], [(-1.0, 6.0), (-4.0, 1.0), (1.0, -0.0), (2.0, 3.0), (4.0, 4.0), (3.0, 1.0), (-2.0, -3.0), (3.0, -2.0), (9.0, -5.0), (5.0, -7.0), (-1.0, -7.0), (0.0, -9.0), (11.0, -8.0), (12.0, -4.0), (8.0, 6.0)], [(10.0, -9.0), (10.0, -6.0), (2.0, -6.0), (5.0, -4.0), (3.0, -1.0), (-6.0, -2.0), (-5.0, -8.0)], [(-2.0, 8.0), (-6.0, 5.0), (-5.0, 1.0), (0.0, 1.0), (-4.0, -1.0), (-5.0, -5.0), (-3.0, -6.0), (2.0, -7.0), (5.0, -3.0), (7.0, -1.0)]])

tests = [test1, test2, test3, test4, test5, test6, test7, test8]

from problem2 import Solution

import matplotlib.pyplot as plt

def do_test(test: Test) -> None:

	start, end, polygons, fences = test

	solution = Solution(start, end, polygons, fences)
	solution.basic_draw(False)
	
	path = solution.solve()

	solution.ax.plot(*zip(*path), color="purple", linewidth=2, linestyle="dashed", marker="o", markersize=3, label="Path") # type: ignore

	plt.show() # type: ignore

from time import perf_counter

start = perf_counter()

for test in tests:
	do_test(test)

end = perf_counter()

print(f"Time: {end - start:.6f} seconds")